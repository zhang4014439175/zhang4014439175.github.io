<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on 换个方向前进</title><link>https://zhang4014439175.github.io/tags/spring/</link><description>Recent content in Spring on 换个方向前进</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 07 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://zhang4014439175.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Java框架-Spring设计思想</title><link>https://zhang4014439175.github.io/post/spring%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</link><pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/spring%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</guid><description>一、控制反转(IoC) IoC(Inversion of Control,控制反转) 是Spring 中一个非常非常重要的概念，它不是什么技术，而是一种解耦的设计思想。它的主要</description></item><item><title>Java框架-Spring源码（二）</title><link>https://zhang4014439175.github.io/post/spring%E6%BA%90%E7%A0%81%E4%BA%8C/</link><pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/spring%E6%BA%90%E7%A0%81%E4%BA%8C/</guid><description>一、refresh 1、prepareRefresh /** * 前戏，做容器刷新前的准备工作 * 1、设置容器的启动时间 * 2、设置活跃状态为true * 3、</description></item><item><title>Java框架-Spring源码（一）</title><link>https://zhang4014439175.github.io/post/spring%E6%BA%90%E7%A0%81%E4%B8%80/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/spring%E6%BA%90%E7%A0%81%E4%B8%80/</guid><description>https://www.bilibili.com/video/BV16q4y1n7Fd/?p=3&amp;spm_id_from=pageDriver&amp;vd_source=81d9ec453e0a2eb8337b93642bef5ce0 一、流程 1、流程 加载xml&amp;mdash;-解析xml&amp;mdash;-封装BeanDefinition&amp;mdash;-实例化&amp;mdash;-</description></item><item><title>Java框架-Spring设计思想</title><link>https://zhang4014439175.github.io/post/springmvc%E4%B8%80/</link><pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/springmvc%E4%B8%80/</guid><description>一、简介 1、介绍 封装了servlet MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分 M:Model，模型层，指工程中的Java</description></item><item><title>Java框架-Spring</title><link>https://zhang4014439175.github.io/post/spring%E4%B8%80/</link><pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/spring%E4%B8%80/</guid><description>一、IOC控制反转 1、概念 控制反转，把对象创建和对象之间的调用过程，交给 Spring 进行管理 使用 IOC 目的:为了耦合度降低 做入门案例就是 IOC 实现 2、底层原理</description></item><item><title>Java反射机制-内省(IntroSpector)</title><link>https://zhang4014439175.github.io/post/%E5%8F%8D%E5%B0%84-%E5%86%85%E7%9C%81/</link><pubDate>Sun, 13 Jun 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/%E5%8F%8D%E5%B0%84-%E5%86%85%E7%9C%81/</guid><description>开发时，经常需要使用java对象的属性来封装程序的数据(其实就是操作对象的set/get方法来设值或取值)，每次都使用反射来完成此类操作过于</description></item><item><title>Java反射机制</title><link>https://zhang4014439175.github.io/post/%E5%8F%8D%E5%B0%84/</link><pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/%E5%8F%8D%E5%B0%84/</guid><description>&lt;p>        JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。&lt;/p></description></item></channel></rss>