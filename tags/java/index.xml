<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on 换个方向前进</title><link>https://zhang4014439175.github.io/tags/java/</link><description>Recent content in Java on 换个方向前进</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 07 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://zhang4014439175.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Java框架-Spring设计思想</title><link>https://zhang4014439175.github.io/post/spring%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</link><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/spring%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</guid><description>一、控制反转(IoC) IoC(Inversion of Control,控制反转) 是Spring 中一个非常非常重要的概念，它不是什么技术，而是一种解耦的设计思想。它的主要</description></item><item><title>Java进阶-JVM（二）</title><link>https://zhang4014439175.github.io/post/jvm%E4%BA%8C/</link><pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/jvm%E4%BA%8C/</guid><description>一、GC Roots 是什么？ 哪些对象可以作为 GC Root？看完秒懂！ 什么是是可达性分析算法？ 现代虚拟机基本都是采用可达性分析算法来判断对象是否存活，可达</description></item><item><title>Java进阶-JVM（一）</title><link>https://zhang4014439175.github.io/post/jvm%E4%B8%80/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/jvm%E4%B8%80/</guid><description>一、内存结构 1、程序计数器 1.1、定义 程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本</description></item><item><title>Stream流的最全分类和应用</title><link>https://zhang4014439175.github.io/post/stream%E6%B5%81/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/stream%E6%B5%81/</guid><description>&lt;p>        &lt;code>Java8&lt;/code> 中添加了一个新的接口类 &lt;code>Stream&lt;/code>，相当于高级版的&lt;code>Iterator&lt;/code>，通过&lt;code>Lambda&lt;/code> 表达式对集合进行各种非常便利、高效的聚合操作&lt;code>（Aggregate Operation）&lt;/code>，或者大批量数据操作&lt;code>(Bulk Data Operation）&lt;/code>。&lt;code>Stream&lt;/code>不仅可以通过串行的方式实现数据操作，还可以通过并行的方式处理大批量数据，提高数据的处理效率。
        在《java8 in action》书中，作者说目前我们在几乎所有开发中都会用到集合，但是&lt;code>目前集合在程序开发中的表现还不够完美&lt;/code>，比如你利用集合处理大量数据时，你不得不面对性能问题，不得不考虑进行并行代码的编写，这些工作都是比较繁重的，于是作者便创造了Stream 流。&lt;/p></description></item><item><title>String字符串</title><link>https://zhang4014439175.github.io/post/string/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/string/</guid><description>string是C++、java、VB等编程语言中的字符串，字符串是一个特殊的对象，属于引用类型。 在java、C#中，String类对象创建后</description></item><item><title>Java进阶-多线程并发-线程池</title><link>https://zhang4014439175.github.io/post/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link><pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid><description>多线程并发是后端开发中常见问题，也是最难解决的问题，下功夫多研究研究，本文档是java juc 的学习笔记。 一、线程池 1、线程池概念 线程池(英语:t</description></item><item><title>Java进阶-多线程并发</title><link>https://zhang4014439175.github.io/post/%E5%B9%B6%E5%8F%91/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/%E5%B9%B6%E5%8F%91/</guid><description>多线程并发是后端开发中常见问题，也是最难解决的问题，下功夫多研究研究，本文档是java juc 的学习笔记。 一、什么是 JUC 1、进程和线程 进程是计算机中</description></item><item><title>Java框架-Spring</title><link>https://zhang4014439175.github.io/post/spring%E4%B8%80/</link><pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/spring%E4%B8%80/</guid><description>一、IOC控制反转 1、概念 控制反转，把对象创建和对象之间的调用过程，交给 Spring 进行管理 使用 IOC 目的:为了耦合度降低 做入门案例就是 IOC 实现 2、底层原理</description></item><item><title>Java反射机制-内省(IntroSpector)</title><link>https://zhang4014439175.github.io/post/%E5%8F%8D%E5%B0%84-%E5%86%85%E7%9C%81/</link><pubDate>Sun, 13 Jun 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/%E5%8F%8D%E5%B0%84-%E5%86%85%E7%9C%81/</guid><description>开发时，经常需要使用java对象的属性来封装程序的数据(其实就是操作对象的set/get方法来设值或取值)，每次都使用反射来完成此类操作过于</description></item><item><title>Java反射机制</title><link>https://zhang4014439175.github.io/post/%E5%8F%8D%E5%B0%84/</link><pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/%E5%8F%8D%E5%B0%84/</guid><description>&lt;p>        JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。&lt;/p></description></item><item><title>Java框架-MybatisPlus</title><link>https://zhang4014439175.github.io/post/mybatis-plus/</link><pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/mybatis-plus/</guid><description>一、条件构造 子查询 queryWrapper.inSql(&amp;ldquo;id&amp;rdquo;, &amp;ldquo;select id from t_user where id &amp;lt;= 3&amp;rdquo;); 组装参数条件 queryWrapper .like(StringUtils.isNotBlank(username), &amp;#34;username&amp;#34;, &amp;#34;a&amp;#34;) .ge(ageBegin != null, &amp;#34;age&amp;#34;, ageBegin) .le(ageEnd != null, &amp;#34;age&amp;#34;, ageEnd); 二、分页 1、添加配置类 @Configuration @MapperScan(&amp;#34;com.atguigu.mybatisplus.mapper&amp;#34;) //可以将主类中的注解移到此处 public class MybatisPlusConfig {</description></item><item><title>Java框架-MybatisPlus</title><link>https://zhang4014439175.github.io/post/mybatis%E4%B8%80/</link><pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/mybatis%E4%B8%80/</guid><description>一、特性 MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架 2) MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集 MyBatis可以</description></item><item><title>Java框架-Spring源码（一）</title><link>https://zhang4014439175.github.io/post/spring%E6%BA%90%E7%A0%81%E4%B8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/spring%E6%BA%90%E7%A0%81%E4%B8%80/</guid><description>https://www.bilibili.com/video/BV16q4y1n7Fd/?p=3&amp;amp;spm_id_from=pageDriver&amp;amp;vd_source=81d9ec453e0a2eb8337b93642bef5ce0 一、流程 1、流程 加载xml&amp;mdash;-解析xml&amp;mdash;-封装BeanDefinition&amp;mdash;-实例化&amp;mdash;-</description></item><item><title>Java框架-Spring源码（二）</title><link>https://zhang4014439175.github.io/post/spring%E6%BA%90%E7%A0%81%E4%BA%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/spring%E6%BA%90%E7%A0%81%E4%BA%8C/</guid><description>一、refresh 1、prepareRefresh /** * 前戏，做容器刷新前的准备工作 * 1、设置容器的启动时间 * 2、设置活跃状态为true * 3、</description></item><item><title>Java框架-Spring设计思想</title><link>https://zhang4014439175.github.io/post/springmvc%E4%B8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zhang4014439175.github.io/post/springmvc%E4%B8%80/</guid><description>一、简介 1、介绍 封装了servlet MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分 M:Model，模型层，指工程中的Java</description></item></channel></rss>